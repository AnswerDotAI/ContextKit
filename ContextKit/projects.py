"""Create and load pre-built aimagic notebooks for contexts"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_projects.ipynb.

# %% auto 0
__all__ = ['templates', 'create_cell', 'create_magic_template_cells', 'create_nb', 'create_magic_template_nb', 'ck']

# %% ../nbs/02_projects.ipynb 2
import json
from pathlib import Path
import ContextKit.contexts as ctx
from fastcore.all import bind, call_parse

from typing import Annotated
import sys

# %% ../nbs/02_projects.ipynb 3
def create_cell(cell_type: str, outputs: list, source: list):
    assert cell_type in ('code','markdown')
    # source must be split on newline - check execnb
    cell = {'cell_type': cell_type, 'execution_count': None, 'metadata': {}, 'source': source} 
    if cell_type == 'code': cell['outputs'] = outputs
    return cell

# %% ../nbs/02_projects.ipynb 4
def create_magic_template_cells(ctx_name):
    _fn = bind(create_cell,outputs=[], cell_type='code')  
    _ctx_dict = getattr(globals()['ctx'], templates[ctx_name], None)()
    cells = [_fn(source=[f"from ContextKit.contexts import *"]),
            _fn(source=[f"{templates[ctx_name]} = {templates[ctx_name]}()\n"] + [f"{k} = {templates[ctx_name]}['{k}']\n" for k in _ctx_dict.keys()]),
            _fn(source=[f"%%ai -c\nPlease read {', '.join([f'$`{k}`' for k in _ctx_dict.keys()])} and give a brief description of what each includes."]),]
    return cells

# %% ../nbs/02_projects.ipynb 5
def create_nb(cells, path):
    assert isinstance(cells, list)
    nb = {"cells": cells, "metadata": {}, "nbformat": 4, "nbformat_minor": 4}
    Path(path).write_text(json.dumps(nb, indent=2))

# %% ../nbs/02_projects.ipynb 6
def create_magic_template_nb(ctx_name, path):
    create_nb(create_magic_template_cells(ctx_name), path=path)

# %% ../nbs/02_projects.ipynb 7
templates = {name[4:]: name for name in dir(ctx) if name.startswith('ctx_')}

# %% ../nbs/02_projects.ipynb 9
import argparse
import sys
from pathlib import Path
from typing import Dict

import ContextKit.contexts as ctx
from fastcore.all import bind

# %% ../nbs/02_projects.ipynb 10
def ck():
    templates = {name[4:]: name for name in dir(ctx) if name.startswith('ctx_')}
    
    parser = argparse.ArgumentParser(description="Create a magic template notebook for a chosen context.")
    parser.add_argument('ctx_name', nargs='?', help=f"Context name. One of: {', '.join(templates.keys())}")
    parser.add_argument('path', nargs='?', help="Output path for the notebook")
    parser.add_argument('--force', action='store_true', help="Force overwrite without prompting")
    args = parser.parse_args()
    
    if not args.ctx_name or not args.path: parser.print_help(); return

    # Arg cleanup
    if path.suffix != '.ipynb': path = path.with_suffix('.ipynb')
    path = Path(args.path)
    
    # Failure mode catching
    if path.is_dir(): print(f"Error: {path} is a directory. Please provide a file path."); return
    if args.ctx_name not in templates:
        print(f"Error: {args.ctx_name} is not a valid context name.")
        print(f"Valid options are: {', '.join(templates.keys())}")
        return
    if path.exists() and not args.force:
        overwrite = input(f"{path} already exists. Overwrite? (y/N): ").lower() == 'y'
        if not overwrite: print("Operation cancelled."); return
    
    # Create NB
    create_magic_template_nb(args.ctx_name, str(path), templates)
    print(f"Notebook created at {path}")
