[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "contextkit",
    "section": "",
    "text": "pip install contextkit\n\n\n\nTo get context from an LLM, use one of the helper functions to pull it.\nIf a function pulls a single context snippit it will return the text, if it return multiple it will return a dictionary.\n\nimport contextkit.read as rd\n\n\n\nEach read_x function is designed to work with a single argument, which is the location of the resource. This typically means a URL or a file path.\n\nrd.read_url('https://www.answer.ai/')[:200]\n\n'Answer.AI\\n\\n  * __\\n  * __\\n\\n# Answer.AI - Practical AI R&D\\n\\n##### Categories\\n\\nAll (33)\\n\\nai (20)\\n\\ncoding (5)\\n\\ncompany (2)\\n\\ncourses (1)\\n\\neducation (1)\\n\\ninterview (1)\\n\\nopen-source (14)\\n\\npolicy (4)\\n\\nproduct'\n\n\nOther arguments are always optional, but can be useful at times. For example, the heavy argument in read_url allows you to do a heavy scrape with a contactless browser using playwrightnb.\n\nrd.read_url('https://www.answer.ai/',heavy=True)[:200]\n\n'Answer.AI\\n\\n  * __\\n  * __\\n\\n# Answer.AI - Practical AI R&D\\n\\n##### Categories\\n\\nAll (33)\\n\\nai (20)\\n\\ncoding (5)\\n\\ncompany (2)\\n\\ncourses (1)\\n\\neducation (1)\\n\\ninterview (1)\\n\\nopen-source (14)\\n\\npolicy (4)\\n\\nproduct'\n\n\nMany have been creates so far, such as\n\n[o for o in dir(rd) if o.startswith('read_')]\n\n['read_dir',\n 'read_file',\n 'read_gdoc',\n 'read_gh_file',\n 'read_gh_repo',\n 'read_gist',\n 'read_git_path',\n 'read_google_sheet',\n 'read_html',\n 'read_pdf',\n 'read_url',\n 'read_yt_transcript']",
    "crumbs": [
      "contextkit"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "contextkit",
    "section": "",
    "text": "pip install contextkit\n\n\n\nTo get context from an LLM, use one of the helper functions to pull it.\nIf a function pulls a single context snippit it will return the text, if it return multiple it will return a dictionary.\n\nimport contextkit.read as rd\n\n\n\nEach read_x function is designed to work with a single argument, which is the location of the resource. This typically means a URL or a file path.\n\nrd.read_url('https://www.answer.ai/')[:200]\n\n'Answer.AI\\n\\n  * __\\n  * __\\n\\n# Answer.AI - Practical AI R&D\\n\\n##### Categories\\n\\nAll (33)\\n\\nai (20)\\n\\ncoding (5)\\n\\ncompany (2)\\n\\ncourses (1)\\n\\neducation (1)\\n\\ninterview (1)\\n\\nopen-source (14)\\n\\npolicy (4)\\n\\nproduct'\n\n\nOther arguments are always optional, but can be useful at times. For example, the heavy argument in read_url allows you to do a heavy scrape with a contactless browser using playwrightnb.\n\nrd.read_url('https://www.answer.ai/',heavy=True)[:200]\n\n'Answer.AI\\n\\n  * __\\n  * __\\n\\n# Answer.AI - Practical AI R&D\\n\\n##### Categories\\n\\nAll (33)\\n\\nai (20)\\n\\ncoding (5)\\n\\ncompany (2)\\n\\ncourses (1)\\n\\neducation (1)\\n\\ninterview (1)\\n\\nopen-source (14)\\n\\npolicy (4)\\n\\nproduct'\n\n\nMany have been creates so far, such as\n\n[o for o in dir(rd) if o.startswith('read_')]\n\n['read_dir',\n 'read_file',\n 'read_gdoc',\n 'read_gh_file',\n 'read_gh_repo',\n 'read_gist',\n 'read_git_path',\n 'read_google_sheet',\n 'read_html',\n 'read_pdf',\n 'read_url',\n 'read_yt_transcript']",
    "crumbs": [
      "contextkit"
    ]
  },
  {
    "objectID": "read.html#imports",
    "href": "read.html#imports",
    "title": "Read",
    "section": "Imports",
    "text": "Imports",
    "crumbs": [
      "Read"
    ]
  },
  {
    "objectID": "read.html#defining-read_-functions",
    "href": "read.html#defining-read_-functions",
    "title": "Read",
    "section": "Defining read_ functions",
    "text": "Defining read_ functions\n\nURL\n\n\n\nread_url\n\n read_url (url, heavy=False, sel=None, useJina=False, **kwargs)\n\nReads a url and converts to markdown\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nurl\n\n\nURL to read\n\n\nheavy\nbool\nFalse\nUse headless browser\n\n\nsel\nNoneType\nNone\nCss selector to pull content from\n\n\nuseJina\nbool\nFalse\nUse Jina for the markdown conversion\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\n\n\n# httpx.get \nread_url('https://docs.fastht.ml/')[:200]\n\n'  * Home\\n  * Learn\\n\\n  * __\\n  * __\\n\\n__\\n\\n  1. Get Started\\n\\n  * Get Started\\n\\n  * Tutorials __\\n\\n    * FastHTML By Example\\n\\n    * Web Devs Quickstart\\n\\n    * JS App Walkthrough\\n\\n    * Using Jupyter to write'\n\n\n\n# headless browser w/ playwrightnb\nread_url('https://docs.fastht.ml/', heavy=True)[:200]\n\n'  * Home\\n  * Learn\\n\\n  * __\\n  * __\\n\\n__\\n\\n  1. Get Started\\n\\n  * Get Started\\n\\n  * Tutorials __\\n\\n    * FastHTML By Example\\n\\n    * Web Devs Quickstart\\n\\n    * JS App Walkthrough\\n\\n    * Using Jupyter to write'\n\n\n\nread_url('https://docs.fastht.ml/',useJina=True)[:200]\n\n'Title: FastHTML – fasthtml\\n\\nURL Source: https://docs.fastht.ml/\\n\\nMarkdown Content:\\nWelcome to the official FastHTML documentation.\\n\\nFastHTML is a new next-generation web framework for fast, scalable w'\n\n\n\nread_url('https://docs.fastht.ml/',sel='#quarto-margin-sidebar')\n\n'## On this page\\n\\n  * Installation\\n  * Usage\\n    * Getting help from AI\\n  * Next Steps\\n  * Other languages and related projects\\n\\n  * __Report an issue\\n\\n## Other Formats\\n\\n  *  __CommonMark\\n\\n'\n\n\n\nread_url('https://docs.fastht.ml/',sel='#quarto-margin-sidebar',heavy=True)\n\n'## On this page\\n\\n  * Installation\\n  * Usage\\n    * Getting help from AI\\n  * Next Steps\\n  * Other languages and related projects\\n\\n  * __Report an issue\\n\\n## Other Formats\\n\\n  *  __CommonMark\\n\\n'\n\n\n\n\nGithub\n\nGist\n\n\n\n\nread_gist\n\n read_gist (url)\n\nReturns raw gist content, or None\n\nsample_gist_url = \"https://gist.github.com/algal/a490024ad088de1b857531c83abef0a0\"\nread_gist(\"https://gist.github.com/algal/a490024ad088de1b857531c83abef0a0\")[:200]\n\n\"#!/usr/bin/env python3\\nimport os, os.path, sys, urllib.parse, base64, subprocess\\n\\ndef on_iterm2(): return 'ITERM_SESSION_ID' in os.environ or os.environ.get('LC_TERMINAL','') == 'iTerm2'\\n\\ndef on_macOS\"\n\n\n\nURL\n\n\nFile\n\n\n\n\nread_gh_file\n\n read_gh_file (url)\n\nReads the contents of a file from its GitHub URL\n\nread_gh_file(\"https://github.com/AnswerDotAI/fasthtml/blob/main/README.md\")[:200]\n\n'# FastHTML\\n\\n\\n&lt;!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! --&gt;\\n\\nWelcome to the official FastHTML documentation.\\n\\nFastHTML is a new next-generation web framework for fast, scalable web\\napplic'\n\n\n\n\nLocal Files\n\nFiles\n\n\n\n\nread_file\n\n read_file (path)\n\n\n\n\nis_unicode\n\n is_unicode (filepath, sample_size=1024)\n\n\nassert is_unicode('_quarto.yml')\n\n\nDirectory\n\n\n\n\nread_dir\n\n read_dir (path, unicode_only=True, included_patterns=['*'],\n           excluded_patterns=['.git/**'], verbose=True, as_dict=False)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npath\n\n\npath to read\n\n\nunicode_only\nbool\nTrue\nignore non-unicode files\n\n\nincluded_patterns\nlist\n[’*’]\nglob pattern of files to include\n\n\nexcluded_patterns\nlist\n[’.git/**’]\nglob pattern of files to exclude\n\n\nverbose\nbool\nTrue\nlog paths of files being read\n\n\nas_dict\nbool\nFalse\nreturns dict of {path,content}\n\n\nReturns\nstr | dict\n\nreturns string with contents of files read\n\n\n\n\nread_dir('.',verbose=False)[:200]\n\n'--- File: ./_quarto.yml ---\\nproject:\\n  type: website\\n\\nformat:\\n  html:\\n    theme: cosmo\\n    css: styles.css\\n    toc: true\\n    keep-md: true\\n  commonmark: default\\n\\nwebsite:\\n  twitter-card: true\\n  open-g'\n\n\n\n\nPDF reader\n\n\n\nread_pdf\n\n read_pdf (file_path:str)\n\n\nread_pdf('./test_dir/test.pdf')\n\n' \\n  \\n   \\nThis is a test PDF document. \\nIf you can read this, you have Adobe Acrobat Reader installed on your computer. '\n\n\n\n\nYT Transcript\n\n\n\nread_yt_transcript\n\n read_yt_transcript (yt_url)\n\n\nyt_url = \"https://youtu.be/MRtg6A1f2Ko?si=C7YZU6FFLdi6v9rk\"\ns = read_yt_transcript(yt_url)\ns[:200]\n\n'- [Tim] A widescreen\\niPod with touch controls, a revolutionary mobile phone, and a breakthrough internet\\ncommunications device. (energetic music) (phone vibrating) Profound new intelligence capabiliti'\n\n\n\n\nGoogle Sheet\n\n\n\nread_google_sheet\n\n read_google_sheet (url)\n\n\nread_google_sheet('https://docs.google.com/spreadsheets/d/17Q3LzRCyM4md28IBxzSSERpaafLgOH8MjH5r6UkyVz8/edit?gid=0#gid=0')\n\nb'Band Pull Around/Aparts\\r\\nShoulder Dislocations Straight\\r\\nShoulder Dislocations Side\\r\\nSuperman Dislocation\\r\\nScorpion Chest Stretch\\r\\nLatt Pulldown\\r\\nTwisty Shoulders\\r\\nRotator Cuff Pull\\r\\nWide bent over row'\n\n\n\n\nGoogle Doc\n\ndef gdoc_url_to_parseable(url):\n    pattern = r'(https://docs\\.google\\.com/document/d/[^/]+)/edit'\n    replacement = r'\\1/export?format=html'\n    return re.sub(pattern, replacement, url)\n\n\n# Test the function\nresult = gdoc_url_to_parseable(\"https://docs.google.com/document/d/13g-IDyuJyk5wE60bOH1YhhFgW8rlh2LnSXccBS0CQd0/edit\")\nprint(result)\n\nhttps://docs.google.com/document/d/13g-IDyuJyk5wE60bOH1YhhFgW8rlh2LnSXccBS0CQd0/export?format=html\n\n\n\n\n\nread_gdoc\n\n read_gdoc (url)\n\n\nread_gdoc(\"https://docs.google.com/document/d/13g-IDyuJyk5wE60bOH1YhhFgW8rlh2LnSXccBS0CQd0/edit\")[:200]\n\n'# Top heading\\n\\nHello this is a context reading test\\n\\n## Heading 2\\n\\nBolded text is here as well as italisized\\n\\n  * I have bullets\\n  * Of things\\n\\n## Heading 3\\n\\nAnd ordered\\n\\n  1. Lists\\n  2. Of\\n  3. Thing'",
    "crumbs": [
      "Read"
    ]
  },
  {
    "objectID": "read.html#next",
    "href": "read.html#next",
    "title": "Read",
    "section": "Next:",
    "text": "Next:\n\nGitHub Repo\nHow to use it:\n\nd = read_gh_repo(ghurl,as_dict=True)\nd.keys()\n\n\nd[list(d.keys())[0]]\n\n\nd = read_gh_repo(ghurl,as_dict=True,verbose=False)\nd.keys()",
    "crumbs": [
      "Read"
    ]
  }
]